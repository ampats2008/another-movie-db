import type { NextPage } from "next"
import * as React from "react"
import Head from "next/head"
import ScoreMeter from "../../components/ScoreMeter"
import CastList from "../../components/CastList"

type Props = {
  content: {
    adult: boolean
    backdrop_path: string
    belongs_to_collection: null
    budget: number
    genres: Genre[]
    homepage: string
    id: number
    imdb_id: string
    maturityRating: string
    original_language: string
    original_title: string
    overview: string
    popularity: number
    poster_path: null
    production_companies: ProductionCompany[]
    production_countries: ProductionCountry[]
    release_date: Date
    revenue: number
    runtime: number
    spoken_languages: SpokenLanguage[]
    status: string
    tagline: string
    title: string
    video: boolean
    vote_average: number
    vote_count: number
  }
}

export interface Genre {
  id: number
  name: string
}

export interface ProductionCompany {
  id: number
  logo_path: null | string
  name: string
  origin_country: string
}

export interface ProductionCountry {
  iso_3166_1: string
  name: string
}

export interface SpokenLanguage {
  iso_639_1: string
  name: string
}

type className = string // allows tailwind to provide intelisense on classlist string

const Movie: NextPage<Props> = ({ content }) => {

  const releaseDate = new Date(`${content.release_date} 00:00:00`)
  const todaysDate = new Date() // for comparison

  const pageContentH2: className =
    "capitalize font-semibold text-2xl mb-6 dark:text-gray-200"
  const pageSection: className = "mt-10 p-10 xl:p-5"

  return (
    <>
      <Head>
        <title>
          AMDb | {content.title} ({releaseDate.getFullYear()})
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* MOVIE TITLE / DESC RIBBON */}
      <section
        className={`p-10 xl:p-5 xl:min-h-[350px] bg-slate-900 dark:bg-slate-700 grid place-content-center`}
        style={{
          backgroundImage: `linear-gradient(90deg, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.3)), url('https://image.tmdb.org/t/p/original${content.backdrop_path}')`,
          backgroundPosition: "top center, center 40%",
          backgroundSize: "cover, cover",
          backgroundRepeat: "no-repeat, no-repeat",
        }}
      >
        <h1 className="capitalize text-4xl text-gray-200 font-bold py-3">
          <a
            href={(content.homepage && content.homepage !== '') ? content.homepage : undefined}
            target={"_blank"}
            rel="noreferrer"
            className="hover:opacity-80"
            title="Go to movie homepage"
          >
            {content.title}
          </a>{" "}
          <span className="opacity-60">({releaseDate.getFullYear()})</span>
        </h1>
        <h1 className="text-2xl italic text-gray-200 font-normal py-3">
          {content.tagline}
        </h1>

        <div className="py-3 max-w-[55ch] leading-8">
          {content.maturityRating && content.maturityRating !== "" && (
            <p
              id="maturityRating"
              className="inline font-semibold text-slate-900 text-lg w-fit px-[6px] py-[4px] rounded-lg bg-gray-200 bg-opacity-80"
            >
              {content.maturityRating}
            </p>
          )}
          <p className="ml-3 inline text-lg text-gray-200">
            {" "}
            {content.genres.map((genre) => (
              <span
                className="after:content-['_/_'] last:after:content-['']"
                key={`${genre.id}-${genre.name}`}
              >
                {genre.name}
              </span>
            ))}
          </p>
        </div>
      </section>

      {/* MOVIE PAGE CONTENT */}
      <div
        className="md:grid lg:max-w-[75vw] lg:mx-auto md:grid-cols-[1fr,_1fr] xl:grid-cols-[2fr,_1fr]"
        style={{ gridTemplateAreas: `'oview stats' 'cast cast'` }}
      >
        <section className={pageSection} style={{ gridArea: "oview" }}>
          <h2 className={pageContentH2}>Overview</h2>
          <p className="indent-[4ch] mt-10 text-lg leading-loose">
            {content.overview}
          </p>
        </section>

        <section className="mt-10 p-10 xl:p-5" style={{ gridArea: "stats" }}>
          <h2 className={pageContentH2}>Details</h2>
          <table id="detailsTable" className="text-left text-lg mx-auto w-full">
            <tbody>
              <tr>
                <th>Release Date:</th>
                <td>{releaseDate.toLocaleDateString()}</td>
              </tr>
              <tr>
                <th>Status:</th>
                <td>{content.status}</td>
              </tr>
              <tr>
                <th>Runtime:</th>
                <td>
                  {Math.floor(content.runtime / 60)} hr, {content.runtime % 60}{" "}
                  min
                </td>
              </tr>
              {content.status.toLowerCase() === "released" &&
                content.revenue !== null && (
                  <tr>
                    <th>Revenue:</th>
                    {/* I've noticed that recently released movies return a revenue amount of $0, which is inaccurate: */}
                    {/* Warn users of bad data if the revenue amt is 0 and the movie was released within the last 3 months or so */}
                    {content.revenue === 0 &&
                    [
                      todaysDate.getMonth() - 2,
                      todaysDate.getMonth() - 1,
                      todaysDate.getMonth(),
                    ].includes(releaseDate.getMonth()) &&
                    todaysDate.getFullYear() === releaseDate.getFullYear() ? (
                      <td>
                        It is likely that there is no revenue data yet. Check
                        back later.
                      </td>
                    ) : (
                      <td>$ {content.revenue.toLocaleString()}</td>
                    )}
                  </tr>
                )}

              <tr>
                <th>Average User Score:</th>
                <td>
                  <ScoreMeter
                    vote_average={content.vote_average}
                    viewPortSize="h-[60px] w-[60px]"
                    viewBox="0 0 40 40"
                    pos={"inline-block"}
                  />
                </td>
              </tr>
            </tbody>
          </table>
        </section>

        <section className={pageSection} style={{ gridArea: "cast" }}>
          <h2 className={pageContentH2}>Cast</h2>
          <CastList contentID={content.id} />
        </section>
      </div>
    </>
  )
}

export default Movie

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getServerSideProps(context: any) {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch(
    `https://api.themoviedb.org/3/movie/${context.params.id}?api_key=${process.env.API_KEY}&language=en-US`
  )
  const data = await res.json()

  // if resource could not be found, return data.results as empty array
  if (!data) {
    return {
      notFound: true,
    }
  }

  // fetch maturity rating (TV-14, TV-MA, etc.)
  const res2 = await fetch(
    `https://api.themoviedb.org/3/movie/${context.params.id}/release_dates?api_key=${process.env.API_KEY}&language=en-US`
  )

  const data2: any = await res2.json()

  let maturityRating = "NR"

  // if resource could not be found, leave response as 'NR' (Not Rated)
  if (res2.status !== 404 && data2.results.length !== 0) {
    const maturityRatings: {
      results: [
        { iso_3166_1: string; release_dates: [{ certification: string }] }
      ]
      id: number
    } = data2

    // get US rating string if it exists, otherwise just use the first object to retrieve it
    let ratingUSorUndefined = maturityRatings.results.find(
      (el) => el.iso_3166_1 === "US"
    )

    // console.log( 'RESPONSE: ', data )

    maturityRating =
      ratingUSorUndefined === undefined
        ? maturityRatings.results[0].release_dates[0].certification
        : ratingUSorUndefined.release_dates[0].certification
  }

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      content: { ...data, maturityRating },
      // only return rating string from rating object
    },
  }
}
